	if(jTextMessage.equals("") | | sourceImage == null){
   	 JOptionPanel.showMesaageDialog(this,  "No message has been embedded",
    		 "No Picture or Message Found", JOptionPane.ERROR_MESSAGE);
      	return;
 }
	String Message = jTextMessage.getText();
	EmbeddedImage = sourceImage.getSubimage(0, 0,
       sourceImage.getWidth(),sourceImage.getHeight());
	embeddedMessage(EmbeddedImage, Message);

	jLabelEmbedded.setIcon(new ImageIcon(EmbeddedImage));
	this.validate


}
private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt){
	jTextMessage.setText("");
	sourceImage = null;
	EmbeddedImage = null;
	jLabelSourceImage.setIcon(null);
	jLabelEmbedded.setIcon(null);
}


private void embeddedMessage(BufferedImage img, String mess){
       int messageLength = mess.length();
       int imageWidth = img.getWidth(), imageHeight(),
              imageSize = imageWidth * imageHeight;


       if(messageLength * 8 + 32 > imageSize){
            JOptionPane.showMessageDialog(this,"Message is too long for this Image",
                "Message Too Long!",  JOptionPane.ERROR_MESSAGE);
           return;

 
}
else{
	embedInteger(img, messageLength, 0, 0);
	byte b[] = mess.getBytes();
	for(int i=0; i<b.length; i++)
		embedByte(img, b[i], i*8+32,  0);

}

}

private void embedInteger(BufferImage img, int n, int start, int storageBit){
		int maxX = img.getWidth(), maxY= img.getHeight(),
		startX = start/maxY, startY = start - startX*maxY, count=0;


		for(int i=startX; i<maxX && count < 32; i++){
		for(int j=startY; j<maxY && count<32; j++){
		int rgb = img.getRGB(i,j), bit = getBitValue(n,  count);
		rgb= setBitValue(rgb, storageBit, bit);
		image.setRGB(i, j, rgb);
		count++;
	}
    }
}
 private void embedByte(BufferedImage img, byte b, int start, int storageBit){
		int maxX = img.getWidth(), maxY = img.getHeight(),
		startX = start/maxY, startY = start - startX*maxY, count=0;
		for(int i = startX; i<maxX && count <8 : i++){
		for(int j = startY; j<maxY && count <8; j++){
		int rgb = img.getRGB(i, j), bit= getBitValue(b, count);
		rgb = setBitValue(rgb,storageBit, bit);
		img.setRGB(I, J, RGB);
		COUNT++;
		}
	}
}





private int getBitValue(int n,  int location){
	int v = (int) (n & Math.round(Math.pow(2, location)));
	return v ==0?0:1;
}

private int  setBitValue{int n, int loaction, int bit){
	int toogle = Math.pow(2, location), bv = getBitValue(n, location);
	if(bv == bit)
		return n;
	if(bv == 0 && bit ==1)
		n^= toogle;
	return n;
}

}




                    


    